{"version":3,"sources":["../src/steam.ts","../src/command.ts","../src/unzip.ts","../src/gmad.ts"],"sourcesContent":["import { access, readFile, writeFile } from \"fs/promises\";\r\nimport { glob } from 'glob';\r\nimport path from \"path\";\r\nimport os from \"os\";\r\n\r\nimport { command } from \"./command.js\";\r\nimport { unzip } from \"./unzip.js\";\r\n\r\nexport interface PublishOptions {\r\n    id?: string;\r\n    appid: string;\r\n\r\n    /**\r\n     * The absolute path to the icon to upload.\r\n     */\r\n    icon?: string;\r\n    title?: string;\r\n    /**\r\n     * The description to upload. This will be converted from Markdown to BBCode.\r\n     */\r\n    description?: string;\r\n    visibility?: number;\r\n\r\n    /**\r\n     * The changelog to upload. This will be converted from Markdown to BBCode.\r\n     */\r\n    changelog?: string;\r\n\r\n    /**\r\n     * The absolute path to the folder or archive to upload.\r\n     */\r\n    folder: string;\r\n}\r\n\r\nexport async function location(): Promise<string> {\r\n    const platform = process.platform === 'win32' ? 'windows' : process.platform === 'darwin' ? 'macos' : 'linux';\r\n    if (platform === 'windows') {\r\n        return path.resolve(os.tmpdir(), 'steamcmd', 'steamcmd.exe')\r\n    } else if (platform === 'linux' || platform === 'macos') {\r\n        return path.resolve(os.tmpdir(), 'steamcmd', 'steamcmd.sh')\r\n    }\r\n\r\n    throw new Error(\"Unsupported platform\");\r\n}\r\n\r\nexport async function publish(username: string, options: PublishOptions): Promise<void> {\r\n    const steamcmd = await location();\r\n    const exists = await access(steamcmd).then(() => true, () => false);\r\n    if (!exists) {\r\n        await download();\r\n    }\r\n\r\n    if (!await authenticated(username)) {\r\n        throw new Error(\"Not authenticated\");\r\n    }\r\n\r\n    if (!path.isAbsolute(options.folder)) {\r\n        throw new Error(\"Folder must be an absolute path\");\r\n    }\r\n\r\n    if (options.icon && !path.isAbsolute(options.icon)) {\r\n        throw new Error(\"Icon must be an absolute path\");\r\n    }\r\n\r\n    const fields = new Map<string, string>();\r\n    fields.set(\"appid\", options.appid);\r\n    fields.set(\"contentfolder\", options.folder);\r\n    fields.set(\"publishedfileid\", options.id ?? \"0\");\r\n\r\n    if (options.changelog) {\r\n        fields.set(\"changenote\", options.changelog.replace(/\"/g, '\\\\\"'));\r\n    }\r\n\r\n    if (options.icon) {\r\n        fields.set(\"previewfile\", options.icon);\r\n    } else {\r\n        if (!options.id) {\r\n            fields.set(\"previewfile\", \"default_icon.png\");\r\n        }\r\n    }\r\n\r\n    if (options.title) {\r\n        fields.set(\"title\", options.title);\r\n    }\r\n\r\n    if (options.description) {\r\n        fields.set(\"description\", options.description.replace(/\"/g, '\\\\\"'));\r\n    }\r\n\r\n    if (options.visibility) {\r\n        fields.set(\"visibility\", options.visibility.toString());\r\n    }\r\n\r\n    const vdf = `\"workshopitem\"\\n{${Array.from(fields.entries()).map(([key, value]) => `\\n\\t\"${key}\" \"${value}\"`).join('')}\\n}`;\r\n\r\n    console.log(`Generating VDF:\\n${vdf}`);\r\n\r\n    await writeFile(path.resolve('addon.vdf'), vdf.trim());\r\n\r\n    const code = await command(steamcmd, \"+@ShutdownOnFailedCommand\", \"1\", \"+login\", username, \"+workshop_build_item\", path.resolve('addon.vdf'), \"+quit\");\r\n    if (code !== 0 && code !== 7) {\r\n        throw new Error(\"Failed to publish addon\");\r\n    }\r\n}\r\n\r\nexport async function authenticated(username: string): Promise<boolean> {\r\n    const steamcmd = await location();\r\n    const exists = await access(steamcmd).then(() => true, () => false);\r\n    if (!exists) {\r\n        return false;\r\n    }\r\n\r\n    const filepath = await configLocation();\r\n\r\n    try {\r\n        const config = await readFile(filepath, \"utf-8\");\r\n        return config.includes(`\"${username}\"`);\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Login to Steam.\r\n * This caches the login credentials for future use.\r\n * @param username Steam username\r\n * @param credentials Steam credentials. Optional if login credentials are already cached. \r\n */\r\nexport async function login(username: string, credentials: { password?: string, totp?: string, vdf?: string } = {}): Promise<void> {\r\n    console.log(\"Attempting to login to Steam...\");\r\n\r\n    console.log(\"\\tChecking for cached credentials...\");\r\n    const config = await configLocation();\r\n    if (!config) {\r\n        console.log(\"\\tNo cached credentials found\");\r\n    } else {\r\n        console.log(\"\\tCached credentials found\");\r\n    }\r\n\r\n    const steamcmd = await location();\r\n    const exists = await access(steamcmd).then(() => true, () => false);\r\n    if (!exists) {\r\n        await download();\r\n    }\r\n\r\n    const { password, totp, vdf } = credentials;\r\n\r\n    if (totp) {\r\n        if (!password) {\r\n            throw new Error(\"TOTP requires a password\");\r\n        }\r\n\r\n        console.log(\"\\tUsing TOTP\");\r\n\r\n        const code = await command(steamcmd, \"+@ShutdownOnFailedCommand\", \"1\", \"+set_steam_guard_code\", totp, \"+login\", username, password, \"+quit\");\r\n        if (code !== 0 && code !== 7) {\r\n            throw new Error(\"Failed to login to Steam\");\r\n        }\r\n    } else if (password) {\r\n        console.log(\"\\tUsing password\");\r\n\r\n        const code = await command(steamcmd, \"+@ShutdownOnFailedCommand\", \"1\", \"+login\", username, password, \"+quit\");\r\n        if (code !== 0 && code !== 7) {\r\n            throw new Error(\"Failed to login to Steam\");\r\n        }\r\n    } else if (vdf) {\r\n        console.log(\"\\tUsing VDF\");\r\n\r\n        await writeFile(config, Buffer.from(vdf, \"base64\"));\r\n\r\n        const code = await command(steamcmd, \"+@ShutdownOnFailedCommand\", \"1\", \"+login\", username, \"+quit\");\r\n        if (code !== 0 && code !== 7) {\r\n            throw new Error(\"Failed to login to Steam\");\r\n        }\r\n    } else {\r\n        console.log(\"\\tUsing cached credentials\");\r\n\r\n        if (!(await authenticated(username))) {\r\n            throw new Error(\"No login method provided\");\r\n        }\r\n    }\r\n\r\n    console.log(\"Successfully logged in to Steam\");\r\n}\r\n\r\n/**\r\n * Update SteamCMD. This does not require login.\r\n */\r\nexport async function update(): Promise<void> {\r\n    const steamcmd = await location();\r\n    const exits = await access(steamcmd).then(() => true, () => false);\r\n    if (!exits) {\r\n        await download();\r\n    }\r\n\r\n    const code = await command(steamcmd, \"+@ShutdownOnFailedCommand\", \"1\", \"+login\", \"anonymous\", \"+quit\");\r\n    if (code !== 0 && code !== 7) {\r\n        throw new Error(\"Failed to update SteamCMD\");\r\n    }\r\n}\r\n\r\nexport async function download(): Promise<string> {\r\n    const platform = process.platform === 'win32' ? 'windows' : process.platform === 'darwin' ? 'macos' : 'linux';\r\n\r\n    if (platform === 'windows') {\r\n        const output = path.resolve(os.tmpdir(), 'steamcmd');\r\n    \r\n        const files = await unzip(\"https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip\", output);\r\n    \r\n        const executable = files.find(f => f.path === \"steamcmd.exe\");\r\n    \r\n        if (!executable) {\r\n            throw new Error(\"Failed to find steamcmd executable\");\r\n        }\r\n    \r\n        return path.resolve(output, executable.path);\r\n    } else if (platform === 'linux')  {\r\n        const output = path.resolve(os.tmpdir(), 'steamcmd');\r\n    \r\n        const files = await unzip(\"https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\", output);\r\n    \r\n        const executable = files.find(f => f.path === \"steamcmd.sh\");\r\n    \r\n        if (!executable) {\r\n            throw new Error(\"Failed to find steamcmd executable\");\r\n        }\r\n    \r\n        return path.resolve(output, executable.path);\r\n    } else if (platform === 'macos') {\r\n        const output = path.resolve(os.tmpdir(), 'steamcmd');\r\n    \r\n        const files = await unzip(\"https://steamcdn-a.akamaihd.net/client/installer/steamcmd_osx.tar.gz\", output);\r\n    \r\n        const executable = files.find(f => f.path === \"steamcmd.sh\");\r\n    \r\n        if (!executable) {\r\n            throw new Error(\"Failed to find steamcmd executable\");\r\n        }\r\n    \r\n        return path.resolve(output, executable.path);\r\n    }\r\n\r\n    throw new Error(\"Unsupported platform\");\r\n}\r\n\r\n/**\r\n * \r\n * @returns The absolute path to the Steam credentials file.\r\n */\r\nexport async function configLocation(): Promise<string> {\r\n    const platform = process.platform === 'win32' ? 'windows' : process.platform === 'darwin' ? 'macos' : 'linux';\r\n    if (platform === 'windows') {\r\n        let filepath = path.resolve(os.tmpdir(), 'steamcmd', 'config', 'config.vdf');\r\n        if (await access(filepath).then(() => true, () => false)) {\r\n            return filepath;\r\n        }\r\n\r\n        const home = path.resolve(process.env['USERPROFILE']!!)\r\n        if (!await access(home).then(() => true, () => false)) {\r\n            throw new Error(\"Failed to find Steam config\");\r\n        }\r\n\r\n        [filepath] = await glob(`${home}/+(Steam|steam|.steam)/config/config.vdf`, { absolute: true, dot: true });\r\n        if (!filepath) {\r\n            throw new Error(\"Failed to find Steam config\");\r\n        }\r\n\r\n        return filepath;\r\n    } else if (platform === 'linux' || platform === 'macos') {\r\n        let filepath = path.resolve(os.tmpdir(), 'steamcmd', 'config', 'config.vdf');\r\n        if (await access(filepath).then(() => true, () => false)) {\r\n            return filepath;\r\n        }\r\n\r\n        const home = path.resolve(process.env['HOME']!!)\r\n        if (!await access(home).then(() => true, () => false)) {\r\n            throw new Error(\"Failed to find Steam config\");\r\n        }\r\n\r\n        [filepath] = await glob(`${home}/+(Steam|steam|.steam)/config/config.vdf`, { absolute: true, dot: true });\r\n        if (!filepath) {\r\n            throw new Error(\"Failed to find Steam config\");\r\n        }\r\n\r\n        return filepath;\r\n    }\r\n\r\n    throw new Error(\"Unsupported platform\");\r\n}\r\n","import { spawn } from \"child_process\";\r\n\r\nexport async function command(...args: string[]): Promise<number|null> {\r\n    const process = spawn(args[0], args.slice(1), {\r\n        stdio: \"inherit\",\r\n    });\r\n\r\n    return new Promise((resolve, reject) => {\r\n        process.on('error', reject);\r\n        process.on('exit', resolve);\r\n    })\r\n}\r\n","import decompress from \"decompress\";\r\nimport { buffer } from \"stream/consumers\";\r\n\r\nexport async function unzip(url: string, output: string): Promise<decompress.File[]> {\r\n    const { body } = await fetch(url);\r\n\r\n    if (!body) {\r\n        throw new Error(\"Failed to download file\");\r\n    }\r\n\r\n    const buf = await buffer(body);\r\n\r\n    return await decompress(buf, output);\r\n}\r\n","import { access, mkdir } from \"fs/promises\";\r\nimport path from \"path\";\r\nimport os from \"os\";\r\nimport { command } from \"./command.js\";\r\nimport { unzip } from \"./unzip.js\";\r\n\r\n/**\r\n * Create a GMA file for an addon.\r\n * @param dir The directory to create the addon from.\r\n * @param out The directory to output the addon to.\r\n * @returns The absolute path to the addon.\r\n */\r\nexport async function create(dir: string, out: string): Promise<string> {\r\n    const gmad = await location();\r\n    const exists = await access(gmad).then(() => true, () => false);\r\n    if (!exists) {\r\n        await download();\r\n    }\r\n\r\n    const absolute = path.resolve(out)\r\n\r\n    await mkdir(path.dirname(absolute), { recursive: true });\r\n\r\n    const code = await command(gmad, \"create\", \"-warninvalid\", \"-folder\", dir, \"-out\", out);\r\n    if (code !== 0) {\r\n        throw new Error(\"Failed to create addon\");\r\n    }\r\n\r\n    return absolute;\r\n}\r\n\r\n/**\r\n * Download gmad\r\n * @returns The absolute path to the gmad executable.\r\n */\r\nexport async function download(): Promise<string> {\r\n    const platform = process.platform === 'win32' ? 'windows' : process.platform === 'darwin' ? 'macos' : 'linux';\r\n\r\n    const output = path.resolve(os.tmpdir(), \"gmad\");\r\n\r\n    const files = await unzip(`https://github.com/WilliamVenner/fastgmad/releases/latest/download/fastgmad_${platform}.zip`, output);\r\n\r\n    const executable = files.find(f => f.path.startsWith(\"fastgmad\") && !f.path.includes(\".dll\") && !f.path.includes(\".so\"));\r\n\r\n    if (!executable) {\r\n        throw new Error(\"Failed to find gmad executable\");\r\n    }\r\n\r\n    return path.resolve(output, executable.path);\r\n}\r\n\r\nexport async function location(): Promise<string> {\r\n    const platform = process.platform === 'win32' ? 'windows' : process.platform === 'darwin' ? 'macos' : 'linux';\r\n    if (platform === 'windows') {\r\n        return path.resolve(os.tmpdir(), 'gmad', 'fastgmad.exe')\r\n    } else if (platform === 'linux' || platform === 'macos') {\r\n        return path.resolve(os.tmpdir(), 'gmad', 'fastgmad')\r\n    }\r\n\r\n    throw new Error(\"Unsupported platform\");\r\n}\r\n"],"mappings":"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","names":["process","access","path","os","location","access","download","path","os"]}